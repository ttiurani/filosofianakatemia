<?php
/**
* @file
* A course database module for Filosofian Akatemia.
*/

/**
 * Schedule Action Constants
 */
define('SCHEDULE', 1);
define('SEND_NOW', 2);
define('DATE_FORMAT', 'd.m.Y H:i');
define('SECONDS_IN_DAY', 86400);

/**
 * Messages
 */
define('PRELIMINARY_ASSIGNMENT', serialize(
    array('id'=>1,
          'type'=>'preliminary_assignment',
          'is_reminder'=> FALSE,
          'name'=>t('preliminary assignment'))));
define('PRELIMINARY_ASSIGNMENT_REMINDER', serialize(
    array('id'=>2,
          'type'=>'preliminary_assignment_reminder',
          'is_reminder'=> TRUE,
          'name'=>t('preliminary assignment reminder'))));
define('COURSE_ASSIGNMENT', serialize(
    array('id'=>3,
          'type'=>'course_assignment',
          'is_reminder'=> FALSE,
          'name'=>t('course assignment'))));
define('COURSE_ASSIGNMENT_REMINDER', serialize(
    array('id'=>4,
          'type'=>'course_assignment_reminder',
          'is_reminder'=> TRUE,
          'name'=>t('course assignment reminder'))));
define('FOLLOWUP', serialize(
    array('id'=>5,
          'type'=>'followup',
          'is_reminder'=> FALSE,
          'name'=>t('followup'))));
define('FEEDBACK', serialize(
    array('id'=>6,
          'type'=>'feedback',
          'is_reminder'=> FALSE,
          'name'=>t('feedback'))));
define('FEEDBACK_REMINDER', serialize(
    array('id'=>7,
          'type'=>'feedback_reminder',
          'is_reminder'=> TRUE,
          'name'=>t('feedback reminder'))));

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function fa_course_help($path, $arg) {
  switch ($path) {
    case "admin/help#fa":
      return '<p>'.  t("Filosofian Akatemia course database module.") .'</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function fa_course_menu() {
  // Admin menu items
  $items['admin/config/people/courses'] = array(
    'title' => 'Filosofian Akatemia Courses',
    'description' => 'Modify Filosofian Akatamia course settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fa_course_settings'),
    'access arguments' => array('administer courses'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file' => 'fa_course.admin.inc',
  );
  // People->Courses menu items
  $items['admin/people/courses'] = array(
      'title' => t("Courses"),
      'page callback' => 'fa_course_overview',
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_LOCAL_TASK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/view/%'] = array(
      'title' => t("View course"),
      'page callback' => 'fa_course_details',
      'page arguments' => array(3, 4),
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/edit/%'] = array(
      'title' => t("Edit course"),
      'page callback' => 'fa_course_details',
      'page arguments' => array(3, 4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/delete/%'] = array(
      'title' => t("Delete course"),
      'page callback' => 'fa_course_delete',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/trainer_handover/%fa_course'] = array(
      'title' => t("Handover to the trainer"),
      'page callback' => 'fa_course_trainer_handover',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/sales_handover/%fa_course'] = array(
      'title' => t("Handover back to sales"),
      'page callback' => 'fa_course_sales_handover',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/sessions/%'] = array(
      'title' => t("Course sessions"),
      'page callback' => 'fa_course_sessions',
      'page arguments' => array(4),
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/sessions/%/edit/%'] = array(
      'title' => t("Edit session"),
      'page callback' => 'fa_course_sessions_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/sessions/%/delete/%'] = array(
      'title' => t("Delete session"),
      'page callback' => 'fa_course_sessions_delete',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/participants/%'] = array(
      'title' => t("Course participants"),
      'page callback' => 'fa_course_participants',
      'page arguments' => array(4),
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/edit/%'] = array(
      'title' => t("Edit participant"),
      'page callback' => 'fa_course_participants_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/delete/%'] = array(
      'title' => t("Delete participant"),
      'page callback' => 'fa_course_participants_delete',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/import'] = array(
      'title' => t("Import participants"),
      'page callback' => 'fa_course_participants_import',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );

  // Invite methods
  $items['invite/accept/%fa_course_participant'] = array(
    'page callback' => 'fa_course_invite_accept',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'fa_course.invite.inc',
  );

  return $items;
}

function fa_course_view_courses_access_callback() {
  return user_access('assist courses') || user_access('administer courses');
}

/**
 * Implements hook_permission().
 */
function fa_course_permission() {
  return array(
      'administer courses' => array(
          'title' => t('Administer courses'),
          'description' => t('Administer all Filosofian Akatemia courses'),
      ),
      'assist courses' => array(
          'title' => t('Assist with courses'),
          'description' => t('Assist with all Filosofian Akatemia courses'),
      ),
  );
}

function _fa_course_get_course_name($facid){
  $result = db_query("SELECT c.product_name as product_name, c.module_id AS module_id, c.organization_id AS organization_id, s.session_start_datetime AS session_start_datetime "
                   . "FROM fa_course c "
                   . "LEFT JOIN fa_course_session s ON s.facid = c.facid "
                   . "WHERE c.facid = :facid "
                   . "ORDER BY s.session_start_datetime ASC",
              array(':facid' => $facid));
  foreach($result as $row){
    return _fa_course_format_course_name($row->product_name, $row->module_id, $row->organization_id,
            isset($row->session_start_datetime) ? $row->session_start_datetime : NULL);
  }
  return FALSE;
}

function _fa_course_format_course_name($product_name, $module_id, $organization_id, $first_session_time){
  $role_array = _fa_course_get_course_roles();
  $module_name = NULL;
  if (isset($module_id)){
	$module_name = $role_array['modules'][$module_id];
  }
  
  $organization_name = $role_array['organizations'][$organization_id];
  if ($first_session_time != NULL){
    $first_session_string = date('Y-m-d', $first_session_time);
  }else{
    $first_session_string = 'TBD';
  }
  $product_module_name = ($module_name == NULL) ? $product_name : $product_name . ' (' . $module_name . ')';
  return $product_module_name . ' @ ' . $organization_name . ' @ ' . $first_session_string;
}

function _fa_course_validate_one_email($parsed_emails, $form_field){
  if (_fa_course_validate_emails($parsed_emails, $form_field)){
    // Also validate that there are exactly one email
    if (!empty($parsed_emails['valid']) && count($parsed_emails['valid']) == 1){
      return TRUE;
    }
    form_set_error($form_field, t('Exactly one email expected'));
  }
  return FALSE;
}

function _fa_course_validate_emails($parsed_emails, $form_field){
  if (!empty($parsed_emails['failed'])){
    $error_message = t('Invalid email addresses:');
    foreach ($parsed_emails['failed'] as $failed_email) {
      $error_message .= ' ' . $failed_email;
    }
    form_set_error($form_field, $error_message);
    return FALSE;
  }
  return TRUE;
}

/**
 * Extract valid e-mail addresses from a string.
 *
 * E-mails must be separated by newlines or commas. E-mails are allowed to
 * include a display name (eg. Some Name <foo@example.com>).
 *
 * @param $string
 *   The string to process. Recognized delimiters are comma, NL and CR.
 * @return
 *   Array of valid and failed e-mail addresses.
 */
function _fa_course_get_emails($string) {
  $valid_emails = $failed_emails = array();
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';
  $rx = "/($user@($domain|(\[($ipv4|$ipv6)\])))>?$/";

  $emails = str_replace(array("\n", "\r"), ',', drupal_strtolower($string));
  $emails = array_filter(array_unique(explode(',', $emails)));
  foreach ($emails as $email) {
    $email = preg_replace('/^.*<(.*)>$/', '${1}', trim($email));
    if ($email) {
      if (preg_match($rx, $email, $match)) {
        $valid_emails[] = $match[1];
      }
      else {
        $failed_emails[] = $email;
      }
    }
  }

  return array('valid' => $valid_emails,
               'failed' => $failed_emails);
}

function _fa_course_get_assignment_options($module_name, $product_name, $node_type){
  
  $assignment_options = array();
  $query_string = "SELECT n.nid, n.title from node n INNER JOIN url_alias ua ON ua.source = CONCAT('node/', n.nid) "
                . "WHERE n.type = :type AND (ua.alias LIKE :product_name";
  $query_array =  array(':type' => $node_type,
              ':product_name' => 'lykeion%/' . _unaccent(str_replace(' ', '-', strtolower($product_name))) . '%');
  if ($module_name){
  	$query_string .= " OR ua.alias LIKE :module_name)";
  	$query_array[':module_name'] = 'lykeion%/' . _unaccent(str_replace(' ', '-', strtolower($module_name))) . '%';
  }else {
  	$query_string .= ")";
  }
  $result = db_query($query_string, $query_array);
  foreach($result as $row){
    $assignment_options[$row->nid] = $row->title;
  }
  
  return $assignment_options;
}

function _fa_course_get_lead_trainer_info($facid){
  $result = db_query("SELECT c.lead_trainer_id, u.mail FROM fa_course c "
                  ."INNER JOIN users u ON u.uid = c.lead_trainer_id "
                  ."WHERE facid = :facid",
                  array(':facid' => $facid));
  foreach($result as $row){
    return $row;
  }
  return FALSE;
}

function _fa_course_get_course_roles(){
  // Prepare role options
  $roles = user_roles(TRUE);
  $organization_options = $module_options = array();
  foreach($roles as $rid => $role){
    $role_array = explode('#', $role);
    if (count($role_array) == 3){
      // Organization
      $organization_options[$rid] = $role_array[1];
    }else if (count($role_array) == 4){
      // Module
      $module_options[$rid] = $role_array[2];
    }
  }

  // Order both lists
  asort($organization_options);
  asort($module_options);

  return array(
    'organizations' => $organization_options,
    'modules' => $module_options,
  );
}

function _fa_course_get_selected_role($form_state, $role_type){
  $selected_role = new stdClass();
  if (!empty($form_state['values']['new_' . $role_type])){
    // Role needs to be created
    $selected_role->name = '';
    if ($role_type == 'module'){
      $selected_role->name .= '#';
    }
    $selected_role->name .= '#' . $form_state['values']['new_' . $role_type] . '#';
  }elseif($role_type != 'module' || $form_state['values']['module_check'] == TRUE){
    $roles = user_roles(TRUE);
    $selected_role->rid = $form_state['values'][$role_type . '_select'];
    $selected_role->name = $roles[$selected_role->rid];
  }
  return $selected_role;
}

function _fa_course_set_course_role($facid){
  $result = db_query("SELECT c.course_id AS course_role_id, r1.name AS organization_role, c.product_name product_name FROM fa_course c "
                  ."INNER JOIN role r1 ON r1.rid = c.organization_id "
                  ."WHERE facid = :facid",
                  array(':facid' => $facid));
  foreach($result as $row){
    if (isset($row->course_role_id)) return TRUE;
    $organization_role_name = $row->organization_role;
    $product_name = $row->product_name;
    break;
  }

  if (!isset($organization_role_name) || !isset($product_name)) return FALSE;

  $first_session = _fa_course_get_first_session($facid);
  $first_session_string = date('Y-m-d', $first_session->session_start_datetime);

  // Create course role based on organization, product name and time of first session
  $course_role = new stdClass();
  $course_role->name = $organization_role_name . $product_name . '#'
                      . $first_session_string . '#';

  user_role_save($course_role);
  db_query("UPDATE {fa_course} SET course_id = :rid WHERE facid = :facid",
            array(':rid' => $course_role->rid, ':facid' => $facid));

  return TRUE;
}

function _fa_course_get_first_session($facid){
  $result = db_query("SELECT * FROM fa_course_session "
                . "WHERE facid = :facid ORDER BY session_start_datetime ASC LIMIT 1",
                array(':facid' => $facid));

  foreach($result as $row){
    return $row;
  }
  return NULL;
}

function _fa_course_get_lead_trainer_id($facid){
  return db_query("SELECT c.lead_trainer_id FROM fa_course c "
                . "WHERE c.facid = :facid", array(':facid' => $facid))->fetchField();
}

function _fa_course_set_lead_trainer_to_session($facsid, $lead_trainer_id, $old_lead_trainer_id = FALSE){
  if ($old_lead_trainer_id != FALSE){
   db_query("UPDATE fa_sessions_trainers SET uid = :lead_trainer_id "
           ."WHERE facsid = :facsid AND uid = :old_lead_trainer_id",
           array(':lead_trainer_id' => $lead_trainer_id,
                 ':old_lead_trainer_id' => $old_lead_trainer_id,
                 ':facsid' => $facsid));
  }else{
   db_query("INSERT INTO fa_sessions_trainers(facsid, uid) "
        ."VALUES(:facsid, :lead_trainer_id)",
      array(':lead_trainer_id' => $lead_trainer_id,
            ':facsid' => $facsid));
  }
}

 /**
 * Load a participant record for a tracking code.
 * Called automatically because %fa_course_participant
 */
function fa_course_participant_load($code) {
  $participants = &drupal_static(__FUNCTION__);
  if (!isset($participants)) {
    $participants = array();
  }

  if (!isset($participants[$code])) {
    $participant = db_select('fa_course_participant', 'fap')
      ->fields('fap')
      ->condition('invite_reg_code', $code)
      ->execute()
      ->fetchObject();

    if ($participant) {
      $participants[$code] = $participant;
    }
    else {
      return FALSE;
    }
  }

  return $participants[$code];
}

 /**
 * Load a course record for handover.
 * Called automatically because %fa_course
 */
function fa_course_load($facid) {
  $course = db_select('fa_course', 'fac')
      ->fields('fac')
      ->condition('facid', $facid)
      ->execute()
      ->fetchObject();
  return $course;
}

/**
 * Generates a unique tracking code.
 *
 * @return
 *   An 8-digit unique tracking code.
 */
function fa_course_generate_reg_code() {
  do {
    $reg_code = user_password(8);
    $result = (bool) db_query_range('SELECT invite_reg_code FROM {fa_course_participant} WHERE invite_reg_code = :regcode', 0, 1, array(':regcode' => $reg_code))->fetchField();
  } while ($result);

  return $reg_code;
}

/*
 * Implements hook_cron().
 */
function fa_course_cron(){
  // Find all courses that are potentially billable
  $result = db_query('SELECT c.facid AS facid, c.billing_information AS billing_information, c.city AS city '
                       . 'trainer.mail AS trainer_email, sales.mail AS sales_email, c.crm_link AS crm_link '
                   . 'FROM fa_course c '
                   . 'INNER JOIN users trainer ON c.lead_trainer_id = trainer.uid '
                   . 'INNER JOIN users sales ON c.lead_sales_id = sales.uid '
                   . 'WHERE c.billing_information IS NOT NULL AND c.billing_sent IS NULL AND c.trainer_handover IS NOT NULL');
  $queue = DrupalQueue::get('fa_course_send_billing');
  foreach ($result as $course_info) {
    // Find if there is a first session and that the session has ended
    $first_session = _fa_course_get_first_session($course_info->facid);
    if ($first_session != NULL
        && $first_session->session_end_datetime < REQUEST_TIME){
      $queue->createItem($course_info);
    }
  }

  // Find scheduled but not sent assignments
  $result = db_query('SELECT * FROM fa_course_session '
                   . 'WHERE (preliminary_assignment_datetime < :now AND preliminary_assignment_sent IS NULL) '
                   . 'OR (preliminary_assignment_reminder_datetime < :now AND preliminary_assignment_reminder_sent IS NULL) '
                   . 'OR (course_assignment_datetime < :now AND course_assignment_sent IS NULL) '
                   . 'OR (course_assignment_reminder_datetime < :now AND course_assignment_reminder_sent IS NULL) '
                   . 'OR (feedback_datetime < :now AND feedback_sent IS NULL) '
                   . 'OR (feedback_reminder_datetime < :now AND feedback_reminder_sent IS NULL) ',
                   array(':now' => REQUEST_TIME));

  $queue = DrupalQueue::get('fa_course_send_assignment');
  foreach ($result as $course_session) {
    $assignments = array();
    $preliminary_assignment = unserialize(PRELIMINARY_ASSIGNMENT);
    if (_fa_course_assignment_scheduled($course_session, $preliminary_assignment)){
      array_push($assignments, $preliminary_assignment);
    }
    $preliminary_assignment_reminder = unserialize(PRELIMINARY_ASSIGNMENT_REMINDER);
    if (_fa_course_assignment_scheduled($course_session, $preliminary_assignment_reminder)){
      array_push($assignments, $preliminary_assignment_reminder);
    }
    $course_assignment = unserialize(COURSE_ASSIGNMENT);
    if (_fa_course_assignment_scheduled($course_session, $course_assignment)){
      array_push($assignments, $course_assignment);
    }
    $course_assignment_reminder = unserialize(COURSE_ASSIGNMENT_REMINDER);
    if (_fa_course_assignment_scheduled($course_session, $course_assignment_reminder)){
      array_push($assignments, $course_assignment_reminder);
    }
    $feedback = unserialize(FEEDBACK);
    if (_fa_course_assignment_scheduled($course_session, $feedback)){
      array_push($assignments, $feedback);
    }
    $feedback_reminder = unserialize(FEEDBACK_REMINDER);
    if (_fa_course_assignment_scheduled($course_session, $feedback_reminder)){
      array_push($assignments, $feedback_reminder);
    }

    foreach($assignments as $assignment){
      $data = new stdClass();
      $data->course_session = $course_session;
      $data->assignment = $assignment;
      $queue->createItem($data);
    }
  }
}

function _fa_course_assignment_scheduled($course_session, $assignment){
  $assignment_datetime = $assignment['type'] . '_datetime';
  $assignment_sent = $assignment['type'] . '_sent';
  return (isset($course_session->$assignment_datetime)
        && $course_session->$assignment_datetime < REQUEST_TIME
        && !isset($course_session->$assignment_sent));
}

/*
 * Implements hook_cron_queue_info().
 */
function fa_course_cron_queue_info(){
  $queues['fa_course_send_billing'] = array(
    'worker callback' => 'fa_course_send_billing',
    'time' => 120,
  );
  $queues['fa_course_send_assignment'] = array(
    'worker callback' => 'fa_course_send_assignment_worker',
    'time' => 300,
  );

  return $queues;
}

function fa_course_send_billing($course_info){
  watchdog('fa_course', 'Sending billing email');
  // First get info from CapsuleCRM
  module_load_include('inc', 'fa_course', 'fa_course.capsulecrm');
  $opportunity = fa_course_get_crm_opportunity($course_info->crm_link);
  $sum = $opportunity->value . ' ' . $opportunity->currency;

  module_load_include('inc', 'fa_course', 'fa_course.email');
  if (fa_course_send_billing_email($course_info->facid,
                                   $sum,
                                   $course_info->billing_information,
                                   $course_info->city,
                                   $course_info->trainer_email, $course_info->sales_email) == FALSE){
    watchdog('fa_course', 'Error sending billing email to course %course',
             array('%course' => $course_info->facid), WATCHDOG_ERROR);
    return;
  }
  db_query("UPDATE fa_course SET billing_sent = :now, price = :price, currency = :currency " .
           "WHERE facid = :facid",
            array(':now' => REQUEST_TIME,
                  ':price' => $opportunity->value,
                   ':currency' => $opportunity->currency,
                   ':facid' => $course_info->facid));
  watchdog('fa_course', 'Billing email sent successfully for course %course',
           array('%course' => $course_info->facid), WATCHDOG_NOTICE);
}

function fa_course_send_assignment_worker($data){
  fa_course_send_assignment($data->course_session, $data->assignment);
  // Persist session
  drupal_write_record('fa_course_session', $data->course_session, 'facsid');
}

function fa_course_send_assignment($course_session, $assignment){
  watchdog('fa_course', 'fa_course_send_assignment called');
  // If course role has not been created create it now
  if(_fa_course_set_course_role($course_session->facid) == FALSE){
    drupal_set_message(t('Could not create course role.'), 'error');
    return;
  }

  module_load_include('inc', 'fa_course', 'fa_course.email');
  $number_of_emails = fa_course_send_assignment_email($course_session, $assignment);

  if ($number_of_emails > 0){
    // Set assignment sent
    $assignment_sent = $assignment['type'] . '_sent';
    $course_session->$assignment_sent = REQUEST_TIME;
    $mstr = t('@num emails sent to participants of course @facsid.', array('@num' => $number_of_emails, '@facsid' => $course_session->facsid));
    drupal_set_message($mstr);
    watchdog('fa_course', $mstr);
  }elseif ($number_of_emails == 0){
    $mstr = t('No participants match criteria, nothing sent for course @facsid assignment @assignment_name.',
              array('@facsid' => $course_session->facsid, '@assignment_name' => $assignment['name']));
    drupal_set_message($mstr);
    watchdog('fa_course', $mstr);
  }
  elseif ($number_of_emails == -1){
    $mstr = t('Error sending emails for course @facsid.', array('@facsid' => $course_session->facsid));
    drupal_set_message($mstr, 'error');
    watchdog('fa_course', $mstr, NULL, WATCHDOG_ERROR);
  }
}


/**
 * Implements hook_user_insert().
 */
function fa_course_user_insert(&$edit, $account, $category) {
  if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION]) && isset($_SESSION[INVITE_SESSION_STATUS])){
    module_load_include('inc', 'fa_course', 'fa_course.invite');
    _fa_course_process_invite($_SESSION[INVITE_SESSION], $account, $_SESSION[INVITE_SESSION_STATUS]);
    _fa_course_clear_session();
  }
}

/**
 * Implements hook_user_login()
  */
function fa_course_user_login(&$edit, $account){
  if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION]) && isset($_SESSION[INVITE_SESSION_STATUS])){
    module_load_include('inc', 'fa_course', 'fa_course.invite');
    _fa_course_process_invite($_SESSION[INVITE_SESSION], $account, $_SESSION[INVITE_SESSION_STATUS]);
    _fa_course_clear_session();
  }
}


function _unaccent($string)
{
    if (strpos($string = htmlentities($string, ENT_QUOTES, 'UTF-8'), '&') !== false)
    {
        $string = html_entity_decode(preg_replace('~&([a-z]{1,2})(?:acute|cedil|circ|grave|lig|orn|ring|slash|tilde|uml);~i', '$1', $string), ENT_QUOTES, 'UTF-8');
    }

    return $string;
}
