<?php
/**
* @file
* A course database module for Filosofian Akatemia.
*/

/**
 * Schedule Action Constants
 */
define('SCHEDULE', 1);
define('SEND_NOW', 2);
define('DATE_FORMAT', 'd.m.Y H:i');
define('SECONDS_IN_DAY', 86400);

/**
 * Messages
 */
define('PRELIMINARY_ASSIGNMENT', serialize(
    array('id'=>1,
          'type'=>'preliminary_assignment',
          'is_reminder'=> FALSE,
          'name'=>t('preliminary assignment'))));
define('PRELIMINARY_ASSIGNMENT_REMINDER', serialize(
    array('id'=>2,
          'type'=>'preliminary_assignment_reminder',
          'is_reminder'=> TRUE,
          'name'=>t('preliminary assignment reminder'))));
define('COURSE_ASSIGNMENT', serialize(
    array('id'=>3,
          'type'=>'course_assignment',
          'is_reminder'=> FALSE,
          'name'=>t('course assignment'))));
define('COURSE_ASSIGNMENT_REMINDER', serialize(
    array('id'=>4,
          'type'=>'course_assignment_reminder',
          'is_reminder'=> TRUE,
          'name'=>t('course assignment reminder'))));
define('FOLLOWUP', serialize(
    array('id'=>5,
          'type'=>'followup',
          'is_reminder'=> FALSE,
          'name'=>t('followup'))));
define('FEEDBACK', serialize(
    array('id'=>6,
          'type'=>'feedback',
          'is_reminder'=> FALSE,
          'name'=>t('feedback'))));
define('FEEDBACK_REMINDER', serialize(
    array('id'=>7,
          'type'=>'feedback_reminder',
          'is_reminder'=> TRUE,
          'name'=>t('feedback reminder'))));

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function fa_course_help($path, $arg) {
  switch ($path) {
    case "admin/help#fa":
      return '<p>'.  t("Filosofian Akatemia course database module.") .'</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function fa_course_menu() {
  // Admin menu items
  $items['admin/config/people/courses'] = array(
    'title' => 'Filosofian Akatemia Courses',
    'description' => 'Modify Filosofian Akatamia course settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fa_course_settings'),
    'access arguments' => array('administer courses'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file' => 'fa_course.admin.inc',
  );
  // People->Courses menu items
  $items['admin/people/courses'] = array(
      'title' => t("Courses"),
      'page callback' => 'fa_course_overview',
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_LOCAL_TASK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/view/%'] = array(
      'title' => t("View course"),
      'page callback' => 'fa_course_details',
      'page arguments' => array(3, 4),
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/edit/%'] = array(
      'title' => t("Edit course"),
      'page callback' => 'fa_course_details',
      'page arguments' => array(3, 4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/delete/%'] = array(
      'title' => t("Delete course"),
      'page callback' => 'fa_course_delete',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/sessions/%'] = array(
      'title' => t("Course sessions"),
      'page callback' => 'fa_course_sessions',
      'page arguments' => array(4),
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/sessions/%/edit/%'] = array(
      'title' => t("Edit session"),
      'page callback' => 'fa_course_sessions_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/sessions/%/delete/%'] = array(
      'title' => t("Delete session"),
      'page callback' => 'fa_course_sessions_delete',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/participants/%'] = array(
      'title' => t("Course participants"),
      'page callback' => 'fa_course_participants',
      'page arguments' => array(4),
      'access callback' => 'fa_course_view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/edit/%'] = array(
      'title' => t("Edit participant"),
      'page callback' => 'fa_course_participants_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/delete/%'] = array(
      'title' => t("Delete participant"),
      'page callback' => 'fa_course_participants_delete',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/import'] = array(
      'title' => t("Import participants"),
      'page callback' => 'fa_course_participants_import',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  // Invite methods
  $items['invite/accept/%fa_course_participant'] = array(
    'page callback' => 'fa_course_invite_accept',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'fa_course.invite.inc',
  );

  return $items;
}

function fa_course_view_courses_access_callback() {
  return user_access('assist courses') || user_access('administer courses');
}

/**
 * Implements hook_permission().
 */
function fa_course_permission() {
  return array(
      'administer courses' => array(
          'title' => t('Administer courses'),
          'description' => t('Administer all Filosofian Akatemia courses'),
      ),
      'assist courses' => array(
          'title' => t('Assist with courses'),
          'description' => t('Assist with all Filosofian Akatemia courses'),
      ),
  );
}

function _fa_course_get_course_name($facid){
  $result = db_query("SELECT c.product_id AS product_id, c.organization_id AS organization_id, s.session_start_datetime AS session_start_datetime "
                   . "FROM fa_course c "
                   . "LEFT JOIN fa_course_session s ON s.facid = c.facid "
                   . "WHERE c.facid = :facid "
                   . "ORDER BY s.session_start_datetime ASC",
              array(':facid' => $facid));
  foreach($result as $row){
    return _fa_course_format_course_name($row->product_id, $row->organization_id,
            isset($row->session_start_datetime) ? $row->session_start_datetime : NULL);
  }
  return FALSE;
}

function _fa_course_format_course_name($product_id, $organization_id, $first_session_time){
  $role_array = _fa_course_get_course_roles();
  $product_name = $role_array['products'][$product_id];
  $organization_name = $role_array['organizations'][$organization_id];
  if ($first_session_time != NULL){
    $first_session_string = date('Y-m-d', $first_session_time);
  }else{
    $first_session_string = 'TBD';
  }
  return $product_name . ' @ ' . $organization_name . ' @ ' . $first_session_string;
}

function _fa_course_validate_one_email($parsed_emails, $form_field){
  if (_fa_course_validate_emails($parsed_emails, $form_field)){
    // Also validate that there are exactly one email
    if (!empty($parsed_emails['valid']) && count($parsed_emails['valid']) == 1){
      return TRUE;
    }
    form_set_error($form_field, t('Exactly one email expected'));
  }
  return FALSE;
}

function _fa_course_validate_emails($parsed_emails, $form_field){
  if (!empty($parsed_emails['failed'])){
    $error_message = t('Invalid email addresses:');
    foreach ($parsed_emails['failed'] as $failed_email) {
      $error_message .= ' ' . $failed_email;
    }
    form_set_error($form_field, $error_message);
    return FALSE;
  }
  return TRUE;
}

/**
 * Extract valid e-mail addresses from a string.
 *
 * E-mails must be separated by newlines or commas. E-mails are allowed to
 * include a display name (eg. Some Name <foo@example.com>).
 *
 * @param $string
 *   The string to process. Recognized delimiters are comma, NL and CR.
 * @return
 *   Array of valid and failed e-mail addresses.
 */
function _fa_course_get_emails($string) {
  $valid_emails = $failed_emails = array();
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';
  $rx = "/($user@($domain|(\[($ipv4|$ipv6)\])))>?$/";

  $emails = str_replace(array("\n", "\r"), ',', drupal_strtolower($string));
  $emails = array_filter(array_unique(explode(',', $emails)));
  foreach ($emails as $email) {
    $email = preg_replace('/^.*<(.*)>$/', '${1}', trim($email));
    if ($email) {
      if (preg_match($rx, $email, $match)) {
        $valid_emails[] = $match[1];
      }
      else {
        $failed_emails[] = $email;
      }
    }
  }

  return array('valid' => $valid_emails,
               'failed' => $failed_emails);
}

function _fa_course_get_assignment_options($product_name, $node_type){
  $result = db_query("SELECT n.nid, n.title from node n INNER JOIN url_alias ua ON ua.source = CONCAT('node/', n.nid) "
      . "WHERE n.type = :type AND ua.alias LIKE :match",
      array(':type' => $node_type,
            ':match' => 'lykeion/' . strtolower($product_name) . '%'));
  $assignment_options = array();
  foreach($result as $row){
    $assignment_options[$row->nid] = $row->title;
  }
  return $assignment_options;
}

function _fa_course_get_lead_trainer_info($course_session){
   $result = db_query("SELECT c.lead_trainer_id, u.mail FROM fa_course c "
                  ."INNER JOIN users u ON u.uid = c.lead_trainer_id "
                  ."WHERE facid = :facid",
                  array(':facid' => $course_session->facid));
  foreach($result as $row){
    return $row;
  }
  return FALSE;
}

function _fa_course_get_course_roles(){
  // Prepare role options
  $roles = user_roles(TRUE);
  $organization_options = $product_options = array();
  foreach($roles as $rid => $role){
    $role_array = explode('#', $role);
    if (count($role_array) == 3){
      // Organization
      $organization_options[$rid] = $role_array[1];
    }else if (count($role_array) == 4){
      // Product
      $product_options[$rid] = $role_array[2];
    }
  }
  return array(
    'organizations' => $organization_options,
    'products' => $product_options,
  );
}

 /**
 * Load a participant record for a tracking code.
 * Called automatically because %fa_course_participant
 */
function fa_course_participant_load($code) {
  $participants = &drupal_static(__FUNCTION__);
  if (!isset($participants)) {
    $participants = array();
  }

  if (!isset($participants[$code])) {
    $participant = db_select('fa_course_participant', 'fap')
      ->fields('fap')
      ->condition('invite_reg_code', $code)
      ->execute()
      ->fetchObject();

    if ($participant) {
      $participants[$code] = $participant;
    }
    else {
      return FALSE;
    }
  }

  return $participants[$code];
}

/**
 * Generates a unique tracking code.
 *
 * @return
 *   An 8-digit unique tracking code.
 */
function fa_course_generate_reg_code() {
  do {
    $reg_code = user_password(8);
    $result = (bool) db_query_range('SELECT invite_reg_code FROM {fa_course_participant} WHERE invite_reg_code = :regcode', 0, 1, array(':regcode' => $reg_code))->fetchField();
  } while ($result);

  return $reg_code;
}

