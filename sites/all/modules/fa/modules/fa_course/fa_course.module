<?php
/**
* @file
* A course database module for Filosofian Akatemia.
*/

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function fa_course_help($path, $arg) {
  switch ($path) {
    case "admin/help#fa":
      return '<p>'.  t("Filosofian Akatemia course database module.") .'</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function fa_course_menu() {
  // Admin menu items
  $items['admin/people/courses'] = array(
      'title' => t("Courses"),
      'page callback' => 'fa_course_admin_overview',
      'access arguments' => array('administer courses'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'fa_course.admin.inc',
  );
  $items['admin/people/courses/edit/%'] = array(
      'title' => t("Edit course"),
      'page callback' => 'fa_course_admin_edit',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.admin.inc',
  );
  $items['admin/people/courses/sessions/%'] = array(
      'title' => t("Course sessions"),
      'page callback' => 'fa_course_admin_sessions',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.admin.inc',
  );
  $items['admin/people/courses/sessions/%/edit/%'] = array(
      'title' => t("Edit session"),
      'page callback' => 'fa_course_admin_sessions_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.admin.inc',
  );
  $items['admin/people/courses/participants/%'] = array(
      'title' => t("Course participants"),
      'page callback' => 'fa_course_admin_participants',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.admin.inc',
  );
  $items['admin/people/courses/participants/%/edit/%'] = array(
      'title' => t("Remove participant"),
      'page callback' => 'fa_course_admin_participants_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fa_course_permission() {
  return array(
      'administer courses' => array(
          'title' => t('Administer courses'),
          'description' => t('Administer all Filosofian Akatemia courses'),
      ),
  );
}


/**
 * Implements invite_accept() from Invite module.
 * Creates links between invites and course participants.
 */
function fa_course_invite_accept($invite, $account, $is_new) {
  if ($is_new == TRUE){
    if ($_SESSION[INVITE_SESSION_STATUS] == INVITE_REUSABLE){
      // Reusable invite, first search for the distributor of the course invite
      $distributor = db_select('fa_course_participant', 'cp')
                    ->fields('cp')
                    ->condition('iid', $invite->iid)
                    ->isNotNull('invite_reuse')
                    ->execute()
                    ->fetchObject();
      if ($distributor){
        if (empty($distributor->uid)){
          // This should happen only once
          $distributor->uid = $invite->invitee;
          drupal_write_record('fa_course_participant', $distributor, 'facpid');
        }
        // Create a new participant
        db_query("INSERT INTO {fa_course_participant}(facid, email, iid, uid) VALUES(:facid, :email, :iid, :uid)",
            array(':facid' => $participant->facid,
                  ':email' => $invite->email,
                  ':iid' => $invite->iid,
                  ':uid' => $invite->invitee));
      }else{
        watchdog('fa_course','Could not find distributor participant of invite with id: %iid and email: %email',
            array('%iid' => $invite->iid, '%email' => $invite->email), WATCHDOG_ERROR);
      }
    }else{
      db_query("UPDATE {fa_course_participant} SET uid = :uid WHERE iid = :iid",
          array(':facid' => $facid,
              ':iid' => $invite->iid,
              ':uid' => $invite->invitee));
    }
  }
}
