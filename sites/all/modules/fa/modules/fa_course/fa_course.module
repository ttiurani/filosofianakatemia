<?php
/**
* @file
* A course database module for Filosofian Akatemia.
*/

/**
 * Schedule Action Constants
 */
define('SCHEDULE', 1);
define('SEND_NOW', 2);
define('DATE_FORMAT', 'd.m.Y H:i');
define('SECONDS_IN_DAY', 86400);

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function fa_course_help($path, $arg) {
  switch ($path) {
    case "admin/help#fa":
      return '<p>'.  t("Filosofian Akatemia course database module.") .'</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function fa_course_menu() {
  // Admin menu items
  $items['admin/people/courses'] = array(
      'title' => t("Courses"),
      'page callback' => 'fa_course_overview',
      'access callback' => 'view_courses_access_callback',
      'type' => MENU_LOCAL_TASK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/view/%'] = array(
      'title' => t("View course"),
      'page callback' => 'fa_course_details',
      'page arguments' => array(3, 4),
      'access callback' => 'view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/edit/%'] = array(
      'title' => t("Edit course"),
      'page callback' => 'fa_course_details',
      'page arguments' => array(3, 4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/delete/%'] = array(
      'title' => t("Delete course"),
      'page callback' => 'fa_course_delete',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.inc',
  );
  $items['admin/people/courses/sessions/%'] = array(
      'title' => t("Course sessions"),
      'page callback' => 'fa_course_sessions',
      'page arguments' => array(4),
      'access callback' => 'view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/sessions/%/edit/%'] = array(
      'title' => t("Edit session"),
      'page callback' => 'fa_course_sessions_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/sessions/%/delete/%'] = array(
      'title' => t("Delete session"),
      'page callback' => 'fa_course_sessions_delete',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.sessions.inc',
  );
  $items['admin/people/courses/participants/%'] = array(
      'title' => t("Course participants"),
      'page callback' => 'fa_course_participants',
      'page arguments' => array(4),
      'access callback' => 'view_courses_access_callback',
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/edit/%'] = array(
      'title' => t("Edit participant"),
      'page callback' => 'fa_course_participants_edit',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/delete/%'] = array(
      'title' => t("Delete participant"),
      'page callback' => 'fa_course_participants_delete',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );
  $items['admin/people/courses/participants/%/import'] = array(
      'title' => t("Import participants"),
      'page callback' => 'fa_course_participants_import',
      'page arguments' => array(4),
      'access arguments' => array('administer courses'),
      'type' => MENU_CALLBACK,
      'file' => 'fa_course.participants.inc',
  );

  return $items;
}

function view_courses_access_callback() {
  return user_access('assist courses') || user_access('administer courses');
}


/**
 * Implements hook_permission().
 */
function fa_course_permission() {
  return array(
      'administer courses' => array(
          'title' => t('Administer courses'),
          'description' => t('Administer all Filosofian Akatemia courses'),
      ),
      'assist courses' => array(
          'title' => t('Assist with courses'),
          'description' => t('Assist with all Filosofian Akatemia courses'),
      ),
  );
}


function _fa_course_validate_one_email($parsed_emails, $form_field){
  if (_fa_course_validate_emails($parsed_emails, $form_field)){
    // Also validate that there are exactly one email
    if (!empty($parsed_emails['valid']) && count($parsed_emails['valid']) == 1){
      return TRUE;
    }
    form_set_error($form_field, t('Exactly one email expected'));
  }
  return FALSE;
}

function _fa_course_validate_emails($parsed_emails, $form_field){
  if (!empty($parsed_emails['failed'])){
    $error_message = t('Invalid email addresses:');
    foreach ($parsed_emails['failed'] as $failed_email) {
      $error_message .= ' ' . $failed_email;
    }
    form_set_error($form_field, $error_message);
    return FALSE;
  }
  return TRUE;
}

/**
 * Extract valid e-mail addresses from a string.
 *
 * E-mails must be separated by newlines or commas. E-mails are allowed to
 * include a display name (eg. Some Name <foo@example.com>).
 *
 * @param $string
 *   The string to process. Recognized delimiters are comma, NL and CR.
 * @return
 *   Array of valid and failed e-mail addresses.
 */
function _fa_course_get_emails($string) {
  $valid_emails = $failed_emails = array();
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';
  $rx = "/($user@($domain|(\[($ipv4|$ipv6)\])))>?$/";

  $emails = str_replace(array("\n", "\r"), ',', drupal_strtolower($string));
  $emails = array_filter(array_unique(explode(',', $emails)));
  foreach ($emails as $email) {
    $email = preg_replace('/^.*<(.*)>$/', '${1}', trim($email));
    if ($email) {
      if (preg_match($rx, $email, $match)) {
        $valid_emails[] = $match[1];
      }
      else {
        $failed_emails[] = $email;
      }
    }
  }

  return array('valid' => $valid_emails,
               'failed' => $failed_emails);
}
