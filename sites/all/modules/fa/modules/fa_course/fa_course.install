<?php

/**
 * @file
 * Installation file for Filosofian Akatemia Course Database module.
 */

/**
 * Implements hook_schema().
 */
function fa_course_schema() {
  $schema['fa_course'] = array(
    'description' => 'The base table for FA courses.',
    'fields' => array(
      'facid' => array(
        'description' => 'The primary identifier for a course.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'product_id' => array(
        'description' => 'Product role id.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'organization_id' => array(
        'description' => 'Organization role id.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'course_id' => array(
          'description' => 'Course role id. This is created when the preliminary assignment is sent.',
          'type' => 'int',
          'not null' => FALSE,
      ),
      'city' => array(
        'description' => 'City where the course is held.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => 'Helsinki',
        ),
      'crm_link' => array(
         'description' => 'CRM hyperlink.',
         'type' => 'varchar',
         'length' => 100,
         'not null' => TRUE,
        ),
      'lead_sales_id' => array(
        'description' => 'Lead sales user id.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lead_trainer_id' => array(
        'description' => 'Lead trainer user id.',
        'type' => 'int',
        'not null' => FALSE,
        ),
      'created' => array(
        'description' => 'Creation time of the course.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'trainer_handover' => array(
        'description' => 'Time when the course responsibility was handed to the trainer.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'trainer_evaluation' => array(
        'description' => 'Trainer evaluation, stored in a serialized array.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'sales_handover' => array(
        'description' => 'Time when the course responsibility was handed back to the sales person.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'price' => array(
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => 0,
        'precision' => 10,
        'scale' => 2
      ),
      'billing_information' => array(
          'description' => 'Billing information.',
          'type' => 'text',
          'not null' => FALSE,
      ),
      'other_information' => array(
          'description' => 'Free text column to add other course related information.',
          'type' => 'text',
          'not null' => FALSE,
      ),
    ),
    'primary key' => array('facid'),
  );

  $schema['fa_course_session'] = array(
      'description' => 'Stores sessions for a course.',
      'fields' => array(
          'facsid' => array(
              'description' => 'The primary identifier for a course session.',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'facid' => array(
              'description' => 'Id for the course.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'session_type' => array(
              'description' => 'Session type, 0=other, 1=lecture, 2=workshop, 3=lecture and workshop, 4=discussion, 5=1on1',
              'type' => 'int',
              'not null' => TRUE,
          ),
          'session_start_datetime' => array(
              'description' => 'Start time for the session.',
              'type' => 'int',
              'not null' => TRUE,
          ),
          'session_end_datetime' => array(
              'description' => 'End time for the session.',
              'type' => 'int',
              'not null' => TRUE,
          ),
          'address' => array(
              'description' => 'Address for the session.',
              'type' => 'varchar',
              'length' => 500,
              'not null' => FALSE,
          ),
          'material' => array(
              'description' => 'Material needed for this session, if any.',
              'type' => 'varchar',
              'length' => 500,
              'not null' => FALSE,
          ),
          'summary_emails' => array(
              'description' => 'List of summary emails separated with a comma.',
              'type' => 'varchar',
              'length' => 1028,
              'not null' => TRUE,
          ),
          'assistant_email' => array(
              'description' => 'Stores the e-mail address of the session assistant, if any.',
              'type' => 'varchar',
              'length' => 100,
              'not null' => FALSE,
          ),
          'preliminary_assignment_node_id' => array(
              'description' => 'Node id for the preliminary assignment webform.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'preliminary_assignment_email_template' => array(
              'description' => 'Text of the preliminary assignment email template, stored in a serialized array.',
              'type' => 'text',
              'not null' => FALSE,
          ),
          'preliminary_assignment_datetime' => array(
              'description' => 'Time when preliminary assignment should be sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'preliminary_assignment_sent' => array(
              'description' => 'Time when preliminary assignment was sent.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'preliminary_assignment_reminder_datetime' => array(
              'description' => 'Time when the preliminary assignment reminder should be sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'preliminary_assignment_reminder_sent' => array(
              'description' => 'Time when the preliminary assignment reminder was sent.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'course_assignment_node_id' => array(
              'description' => 'Node id of a course assignment webform.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'course_assignment_email_template' => array(
              'description' => 'Text of the course assignment email template, stored in a serialized array.',
              'type' => 'text',
              'not null' => FALSE,
          ),
          'course_assignment_datetime' => array(
              'description' => 'Time when the course assignment should be sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'course_assignment_sent' => array(
              'description' => 'Time when the course assignment was sent.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'course_assignment_reminder_datetime' => array(
              'description' => 'Time when the course assignment reminder should be sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'course_assignment_reminder_sent' => array(
              'description' => 'Time when the course assignment reminder was sent.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'followup_email_template' => array(
              'description' => 'Text of the followup email template, stored in a serialized array.',
              'type' => 'text',
              'not null' => FALSE,
          ),
          'followup_email_datetime' => array(
              'description' => 'Time when the followup email should be sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'followup_email_sent' => array(
              'description' => 'Time when the followup email was sent.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'immediate_feedback_address' => array(
              'description' => 'Address to immediate feedback zip file, or if done electronically, link to used feedback webform.',
              'type' => 'varchar',
              'length' => 100,
              'not null' => FALSE,
          ),
          'feedback_node_id' => array(
              'description' => 'Node id for the feedback webform.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'feedback_email_template' => array(
              'description' => 'Text of the feedback email template, stored in a serialized array.',
              'type' => 'text',
              'not null' => FALSE,
          ),
          'feedback_datetime' => array(
              'description' => 'Time when feedback request should be sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'feedback_sent' => array(
              'description' => 'Time when feedback request was sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'feedback_reminder_datetime' => array(
              'description' => 'Time when feedback request reminder should be sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'feedback_reminder_sent' => array(
              'description' => 'Time when feedback request reminder was sent for this session.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'other_information' => array(
              'description' => 'Free text column to add other session related information.',
              'type' => 'text',
              'not null' => FALSE,
          ),
      ),
      'primary key' => array('facsid'),
      'indexes' => array(
          'facid' => array('facid')),
  );

  $schema['fa_sessions_trainers'] = array(
      'description' => t('Maps sessions to trainers.'),
      'fields' => array(
          'facsid' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
              'description' => t('Primary Key: {fa_course_session}.facsid for session.'),
          ),
          'uid' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
              'description' => t('Primary Key: {users}.uid for trainer.'),
          ),
      ),
      'primary key' => array('facsid', 'uid'),
      'indexes' => array(
          'uid' => array('uid'),
      ),
  );

  $schema['fa_course_participant'] = array(
      'description' => 'Stores participants for a course.',
      'fields' => array(
          'facpid' => array(
              'description' => 'The primary identifier for a course participant.',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'facid' => array(
              'description' => 'Id for the course.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'email' => array(
              'description' => 'Stores the e-mail the invite has been addressed to.',
              'type' => 'varchar',
              'length' => 100,
              'not null' => TRUE,
          ),
          'first_name' => array(
              'description' => 'First name of the participant.',
              'type' => 'varchar',
              'length' => 256,
              'not null' => FALSE,
          ),
          'last_name' => array(
              'description' => 'Last name of the participant.',
              'type' => 'varchar',
              'length' => 256,
              'not null' => FALSE,
          ),
          'invite_reg_code' => array(
              'description' => 'Stores the issued registration code and acts as primary identifier for a invite.',
              'type' => 'varchar',
              'length' => 8,
              'not null' => FALSE,
          ),
          'invite_reuse' => array(
              'description' => 'Number of times the invite that is to be sent can be reused, NULL if not a reusable invite.',
              'type' => 'int',
              'not null' => FALSE,
          ),
          'invite_joined' => array(
            'description' => 'Will be filled with the time the invite was accepted upon registration.',
            'type' => 'int',
            'not null' => FALSE,
          ),
          'uid' => array(
              'description' => 'Stores the user id of the participant.',
              'type' => 'int',
              'not null' => FALSE,
          ),
      ),
      'primary key' => array('facpid'),
      'indexes' => array(
          'facid' => array('facid')),
  );

  $schema['fa_sessions_participants'] = array(
      'description' => t('Maps sessions to participants.'),
      'fields' => array(
          'facsid' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
              'description' => t('Primary Key: {fa_course_session}.facsid for session.'),
          ),
          'facpid' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
              'description' => t('Primary Key: {fa_course_participant}.facpid for participant.'),
          ),
      ),
      'primary key' => array('facsid', 'facpid'),
      'indexes' => array(
          'facsid' => array('facsid'),
      ),
  );


  $schema['fa_course_message'] = array(
      'description' => 'Stores course email messages.',
      'fields' => array(
          'facmid' => array(
              'description' => 'The primary identifier for a course message.',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'facsid' => array(
              'description' => 'Id for the course session that has the message template.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'template_type' => array(
              'description' => 'Message template type, 1=preliminary assignment, 2=preliminary assignment reminder, '
                              .'3=course assignment, 4=course assignment reminder, 5=followup, 5=feedback, 6=feedback reminder',
              'type' => 'int',
              'not null' => TRUE,
          ),
          'message' => array(
              'description' => 'Text of the email message, stored in a serialized array.',
              'type' => 'text',
              'not null' => TRUE,
          ),
          'sent' => array(
              'description' => 'Stores the time the message was sent.',
              'type' => 'int',
              'not null' => TRUE,
          ),
      ),
      'primary key' => array('facmid'),
  );

  $schema['fa_participants_messages'] = array(
      'description' => t('Maps participants to messages.'),
      'fields' => array(
          'facpid' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
              'description' => t('Primary Key: {fa_course_participant}.facpid for participant.'),
          ),
          'facmid' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
              'description' => t('Primary Key: {fa_course_message}.facmid for message.'),
          ),
      ),
      'primary key' => array('facpid', 'facmid'),
      'indexes' => array(
          'facpid' => array('facpid'),
      ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function fa_course_uninstall() {
  // Get global variable array
  global $conf;
  foreach (array_keys($conf) as $key) {
    // Find variables that have the module prefix
    if (strpos($key, 'fa_course') === 0) {
      variable_del($key);
    }
  }
}
