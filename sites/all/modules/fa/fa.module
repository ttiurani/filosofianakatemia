<?php
/**
* @file
* A menu_block module extension for the Filosofian Akatemia theme.
*/

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function fa_help($path, $arg) {
  switch ($path) {
    case "admin/help#fa":
      return '<p>'.  t("Filosofian Akatemia module that provides theme background text, extends menu_block, provides a custom registration page and provides a custom class invite block.") .'</p>';
      break;
  }
}

/**
 * Custom registration things
 */
function fa_form_user_register_form_alter(&$form, &$form_state, $form_id){

  if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS]) &&
      $_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID){
    if (isset($_SESSION[INVITE_SESSION_DESTINATION])){
      // Set the GET parameter back from the session variable
      $_GET['destination'] = $_SESSION[INVITE_SESSION_DESTINATION];
    }
    // Disable editing of the email field
    $form['account']['mail']['#disabled'] = TRUE;
    // Set email as the value of the username
    $form['account']['name']['#default_value'] = $form['account']['mail']['#default_value'];
    // Hide the username field
    $form['account']['name']['#access'] = FALSE;

    // Add Facebook Connect button to the login form
    $facebook_output = '<div id="fboauth-login">' . fboauth_action_display('connect') . '</div>';
    $form['facebook'] = array(
        '#markup' => $facebook_output,
        '#weight' => 101,
    );
  }
}

function fa_menu_alter(&$items) {
  // Hide all tabs on the registration page
  $items['user/register']['type'] = MENU_CALLBACK;
}

function fa_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'user_login'){
    if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS])
        && ($_SESSION[INVITE_SESSION_STATUS] == INVITE_USED
            || $_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID)){

      // In order to prevent caching of the preset username, we have to
      // disable caching for user/login when routed from the invite module
      $GLOBALS['conf']['cache'] = FALSE;

      if (isset($_SESSION[INVITE_SESSION_DESTINATION])){
        // Set the GET parameter back from the session variable
        $_GET['destination'] = $_SESSION[INVITE_SESSION_DESTINATION];
      }

      // Set the default value
      $form['name']['#default_value'] = $_SESSION[INVITE_SESSION_EMAIL];
      // Disable editing of the username field
      $form['name']['#disabled'] = TRUE;


    }
    // Add Facebook Connect button to the login form
    $facebook_output = '<div id="fboauth-login">' . fboauth_action_display('connect') . '</div>';
    $form['facebook'] = array(
     '#markup' => $facebook_output,
        '#weight' => 101,
    );

  }else if ($form_id == 'user_login_block'){
    if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS])
         && ($_SESSION[INVITE_SESSION_STATUS] == INVITE_USED
            || $_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID)){
      // Disable the entire block so that it is not possible
      // to give the role to someone else
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Alter login block to include Facebook login
 */
function fa_block_view_user_login_alter(&$data, $block) {
  if (isset($data) && !empty($data) ){
    $facebook_output = '<div id="fboauth-login">' . fboauth_action_display('connect') . '</div>';
    $data['content']['facebook'] = array(
        '#markup' => $facebook_output,
        '#weight' => 101, // One over the "Log in" button
        );
    // Change user name hint to email
    $data['content']['name']['#title'] = t('Email address');
  }
}

/**
 * Implements hook_block_info().
 */
function fa_block_info() {
  $blocks['fa-bg'] = array(
      'info' => t('Filosofian Akatemia Background Text'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['fa-up'] = array(
      'info' => t('Filosofian Akatemia Up One'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['fa-course'] = array(
      'info' => t('Filosofian Akatemia Invite Course'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*
* Prepares the contents of the block.
*/
function fa_block_view($delta = '') {
  $block = array();
  switch($delta){
    case 'fa-bg':
      if(!drupal_is_front_page() && user_access('access content')){
      	$config = menu_block_get_config($delta);
      	$tree = menu_tree_build($config);

      	if ($tree != NULL && isset($tree['content']) && isset($tree['content']['#content'])){
      		$parentofactive = _find_parent_of_active($tree['content']['#content']);
            if (isset($parentofactive)){
        		$bgdivid = 'fa-bg-';
        		if (is_string($parentofactive)){
        			$menutext = strtolower($parentofactive);
        			$bgdivid .= $menutext. '-menu';
        		}else{
        			$menutext = strtolower($parentofactive['#title']);
        			$bgdivid .= $menutext;
        		}
        		$block['content'] =
        			'<div id="' . $bgdivid . '" class="fa-bg"><img src="sites/all/themes/fa/images/menu-background-'
        			. $menutext
        			. '.png"/></div>';
            }
      	}
      }
      break;
    case 'fa-up':
      if(user_access('access content')){
        $config = menu_block_get_config($delta);
        $tree = menu_tree_build($config);

        if ($tree != NULL && isset($tree['content']) && isset($tree['content']['#content'])){
          $parentofactive = _find_parent_of_active($tree['content']['#content']);

          if (isset($parentofactive) && !is_string($parentofactive)){
            $options = array(
                'attributes' => array(
                    'class' => array('up-one'),
                    'id' => 'up-one',
                    'alt' => $parentofactive['#title']),
                'html' => TRUE,
            );
            $block['content'] = l(
                '<img src="sites/all/themes/fa/images/menu-up.png" />',
                $parentofactive['#href'],
                $options);
          }
        }
      }
      break;
    case 'fa-course':
      $course_form = drupal_get_form('fa_course_form');
      $block['content'] = '<div id="fa-course">'
                        . drupal_render($course_form) . '</div>';
      break;
  }
  return $block;
}

/**
 * Recursively finds closest parent of active node
 * from list of parents, returns the title of the active
 * parent as string if parent is itself active.
 * @param unknown_type $parentnodes
 */
function _find_parent_of_active($parentnodes) {
	$parentofactive = NULL;
	foreach($parentnodes as $parentnode){
		if (isset($parentnode['#attributes']) &&
				isset($parentnode['#attributes']['class'])){
			if (in_array('active-trail', $parentnode['#attributes']['class'])){
				if (in_array('active', $parentnode['#attributes']['class'])){
					// Parent is itself active, return title
					$parentofactive = $parentnode['#title'];
					break;
				}else{
					// Parent is in active trail, but not active, see children
					$parentofactive = _find_parent_of_active($parentnode['#below']);
					if (is_string($parentofactive)){
						// Found a parent of an active node!
						$parentofactive = $parentnode;
						break;
					}
				}
			}
		}
	}
	return $parentofactive;
}


/**
 * Course specific stuff
 */

function fa_course_form($form, &$form_state) {

  // Prepare role options
  $roles = user_roles(TRUE);
  foreach($roles as $rid => $role){
    $role_array = explode('#', $role);
    if (count($role_array) == 3){
      // Organization
      $organization_options[$rid] = $role_array[1];
    }else if (count($role_array) == 4){
      // Product
      $product_options[$rid] = $role_array[2];
    }
  }
  // Not listed options
  $organization_options[0] = t('--not listed--');
  $product_options[0] = t('--not listed--');

  // Organization select
  $form['fa_course_organization_select'] = array(
      '#type'           => 'select',
      '#multiple'       => FALSE,
      '#title'          => t('Select Organization'),
      '#options'        => $organization_options,
      '#description'    => t('Select the organization/company where the class will be kept.'),
  );
  $form['fa_course_organization'] = array(
      '#type'           => 'textfield',
      '#title'          => t('New Organization'),
      '#description'    => t('Type the name of the new organization here.'),
      '#states' => array(
          'visible' => array(   // action to take.
              ':input[name=fa_course_organization_select]' => array('value' => 0),
          ),
      ),
  );

  // Product select
  $form['fa_course_product_select'] = array(
      '#type'           => 'select',
      '#multiple'       => FALSE,
      '#title'          => t('Select Product'),
      '#options'        => $product_options,
      '#description'    => t('Select the product.'),
  );
  $form['fa_course_product'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Custom product'),
      '#description'    => t('Type the name of the custom product here.'),
      '#states' => array(
          'visible' => array(   // action to take.
              ':input[name=fa_course_product_select]' => array('value' => 0),
          ),
      ),
  );

  // Date of course
  $form['fa_course_date'] = array(
      '#type'           => 'date',
      '#title'          => t('Date for the first session of the course'),
      '#description'    => t('Select the date for the course'),
  );

  // Appendix
  $form['fa_course_appendix'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Optional appendix'),
      '#required'       => FALSE,
      '#description'    => t('Optionally type an appendix for the course, such as group number if there are multiple classes on the same day.'),
  );

  // Add the invite page form here and hide unneeded fields
  $form += invite_page_form(INVITE_UNLIMITED);
  $form['invite_roles']['#access'] = FALSE;
  $form['submit']['#access'] = FALSE;
  $form['submit_show']['#access'] = FALSE;

  // Submit
  $form['fa_course_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send invites'),
  );
  return $form;
}

function fa_course_form_validate($form, &$form_state) {
  $organization_role = _fa_course_get_selected_role($form_state, 'organization');
  $product_role = _fa_course_get_selected_role($form_state, 'product');
  $class_role = _fa_course_get_class_role($form_state, $organization_role, $product_role);
  // Check that a role with given class name does not yet exist
  $roles = user_roles(TRUE);

  foreach($roles as $role_name){
    if ($role_name == $class_role->name){
      form_set_error('fa_course_appendix', t('Role name with given organization/product/date already exists, set appropriate appendix'));
      return;
    }
  }
}

function fa_course_form_submit($form, &$form_state) {

  // Organization role
  $organization_role = _fa_course_get_selected_role($form_state, 'organization');
  if (!isset($organization_role->rid)){
    // Organization role needs to be saved
    user_role_save($organization_role);
  }

  // Product role
  $product_role = _fa_course_get_selected_role($form_state, 'product');
  if (!isset($organization_role->rid)){
    // Product role needs to be saved
    user_role_save($product_role);
  }

  // Class role
  $class_role = _fa_course_get_class_role($form_state, $organization_role, $product_role);
  user_role_save($class_role);

  // Set all three roles to the invite
  $form_state['values']['invite_roles'] = array(
      $organization_role->rid => $organization_role->name,
      $product_role->rid => $product_role->name,
      $class_role->rid => $class_role->name);

  // Search for a preliminary assignment
  $preliminary_assignment_url = db_query("SELECT ua.alias from node n INNER JOIN url_alias ua ON ua.source = CONCAT('node/', n.nid) "
                                       . "WHERE n.type = 'preliminary_assignment' AND n.title LIKE :title",
                                        array(':title' => substr($product_role->name, 2, (strlen($product_role->name)-3)) . '%')
                                        )->fetchField();
  if (!empty($preliminary_assignment_url)){
    // Change the [invite:join-link] to contain the destination
    $form_state['values']['message'] = str_replace("[invite:join-link]",
        "[invite:join-link]&destination=" . $preliminary_assignment_url, $form_state['values']['message']);
  }

  // Send invites by validating and submitting the form
  invite_form_validate($form, $form_state);
  invite_form_submit($form, $form_state);
}

function _fa_course_get_class_role($form_state, $organization_role, $product_role){
  // Create class role based on organization, product and time
  $class_role = new stdClass();
  $class_date = $form_state['values']['fa_course_date'];
  $class_role->name = $organization_role->name . substr($product_role->name, 2, (strlen($product_role->name)-2))
                      . $class_date['year'] . '-' . str_pad($class_date['month'], 2, '0', STR_PAD_LEFT)
                      . '-' . str_pad($class_date['day'], 2, '0', STR_PAD_LEFT). '#';
  if (!empty ($form_state['values']['fa_course_appendix'])){
    $class_role->name .= $form_state['values']['fa_course_appendix'] . '#';
  }
  return $class_role;
}

function _fa_course_get_selected_role($form_state, $role_type){
  $selected_role = new stdClass();
  if (!empty($form_state['values']['fa_course_' . $role_type])){
    // Role needs to be created
    $selected_role->name = '#' . $form_state['values']['fa_course_' . $role_type] . '#';
  }else{
    $roles = user_roles(TRUE);
    $selected_role->rid = $form_state['values']['fa_course_' . $role_type . '_select'];
    $selected_role->name = $roles[$selected_role->rid];
  }
  return $selected_role;
}
