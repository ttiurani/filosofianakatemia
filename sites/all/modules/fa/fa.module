<?php
/**
* @file
* A menu_block module extension for the Filosofian Akatemia theme.
*/

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function fa_help($path, $arg) {
  switch ($path) {
    case "admin/help#fa":
      return '<p>'.  t("Filosofian Akatemia theme module that provides theme background text, extends menu_block, and provides a custom registration page.") .'</p>';
      break;
  }
}

/**
 * Custom registration things
 */
function fa_form_user_register_form_alter(&$form, &$form_state, $form_id){

  if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS]) &&
      $_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID){
    if (isset($_SESSION[INVITE_SESSION_DESTINATION])){
      // Set the GET parameter back from the session variable
      $_GET['destination'] = $_SESSION[INVITE_SESSION_DESTINATION];
    }
    // Disable editing of the email field
    $form['account']['mail']['#disabled'] = TRUE;
    // Set email as the value of the username
    $form['account']['name']['#default_value'] = $form['account']['mail']['#default_value'];
    // Hide the username field
    $form['account']['name']['#access'] = FALSE;
  }
}

function fa_menu_alter(&$items) {
  // Hide all tabs on the registration page
  $items['user/register']['type'] = MENU_CALLBACK;
}

function fa_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'user_login'){
    if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS])
        && ($_SESSION[INVITE_SESSION_STATUS] == INVITE_USED
            || $_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID)){

      // In order to prevent caching of the preset username, we have to
      // disable caching for user/login when routed from the invite module
      $GLOBALS['conf']['cache'] = FALSE;

      if (isset($_SESSION[INVITE_SESSION_DESTINATION])){
        // Set the GET parameter back from the session variable
        $_GET['destination'] = $_SESSION[INVITE_SESSION_DESTINATION];
      }

      // Set the default value
      $form['name']['#default_value'] = $_SESSION[INVITE_SESSION_EMAIL];
      // Disable editing of the username field
      $form['name']['#disabled'] = TRUE;
    }
  }else if ($form_id == 'user_login_block'){
    if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS])
         && ($_SESSION[INVITE_SESSION_STATUS] == INVITE_USED
            || $_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID)){
      // Disable the entire block so that it is not possible
      // to give the role to someone else
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_block_info().
 */
function fa_block_info() {
  $blocks['fa-bg'] = array(
      'info' => t('Filosofian Akatemia Background Text'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['fa-up'] = array(
      'info' => t('Filosofian Akatemia Up One'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*
* Prepares the contents of the block.
*/
function fa_block_view($delta = '') {
  $block = array();
  switch($delta){
    case 'fa-bg':
      if(!drupal_is_front_page() && user_access('access content')){
      	$config = menu_block_get_config($delta);
      	$tree = menu_tree_build($config);

      	if ($tree != NULL && isset($tree['content']) && isset($tree['content']['#content'])){
      		$parentofactive = _find_parent_of_active($tree['content']['#content']);
            if (isset($parentofactive)){
        		$bgdivid = 'fa-bg-';
        		if (is_string($parentofactive)){
        			$menutext = strtolower($parentofactive);
        			$bgdivid .= $menutext. '-menu';
        		}else{
        			$menutext = strtolower($parentofactive['#title']);
        			$bgdivid .= $menutext;
        		}
        		$block['content'] =
        			'<div id="' . $bgdivid . '" class="fa-bg"><img src="sites/all/themes/fa/images/menu-background-'
        			. $menutext
        			. '.png"/></div>';
            }
      	}
      }
      break;
    case 'fa-up':
      if(user_access('access content')){
        $config = menu_block_get_config($delta);
        $tree = menu_tree_build($config);

        if ($tree != NULL && isset($tree['content']) && isset($tree['content']['#content'])){
          $parentofactive = _find_parent_of_active($tree['content']['#content']);

          if (isset($parentofactive) && !is_string($parentofactive)){
            $options = array(
                'attributes' => array(
                    'class' => array('up-one'),
                    'id' => 'up-one',
                    'alt' => $parentofactive['#title']),
                'html' => TRUE,
            );
            $block['content'] = l(
                '<img src="sites/all/themes/fa/images/menu-up.png" />',
                $parentofactive['#href'],
                $options);
          }
        }
      }
      break;
  }
  return $block;
}

/**
 * Recursively finds closest parent of active node
 * from list of parents, returns the title of the active
 * parent as string if parent is itself active.
 * @param unknown_type $parentnodes
 */
function _find_parent_of_active($parentnodes) {
	$parentofactive = NULL;
	foreach($parentnodes as $parentnode){
		if (isset($parentnode['#attributes']) &&
				isset($parentnode['#attributes']['class'])){
			if (in_array('active-trail', $parentnode['#attributes']['class'])){
				if (in_array('active', $parentnode['#attributes']['class'])){
					// Parent is itself active, return title
					$parentofactive = $parentnode['#title'];
					break;
				}else{
					// Parent is in active trail, but not active, see children
					$parentofactive = _find_parent_of_active($parentnode['#below']);
					if (is_string($parentofactive)){
						// Found a parent of an active node!
						$parentofactive = $parentnode;
						break;
					}
				}
			}
		}
	}
	return $parentofactive;
}
