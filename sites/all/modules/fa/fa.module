<?php
/**
* @file
* Filosofian Akatemia module.
*/

/**
 * Invite constants.
 */
define('INVITE_SESSION', 'invite_code');
define('INVITE_SESSION_STATUS', 'invite_status');
define('INVITE_SESSION_DESTINATION', 'invite_destination');
define('INVITE_SESSION_EMAIL', 'invite_email');

define('INVITE_VALID', 1);
define('INVITE_USED', 2);
define('INVITE_REUSABLE', 3);
define('INVITE_PROCESSED', 4);

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function fa_help($path, $arg) {
  switch ($path) {
    case "admin/help#fa":
      return '<p>'.  t("Filosofian Akatemia module that provides theme background text, extends menu_block, provides a custom registration page and provides a custom class invite block.") .'</p>';
      break;
  }
}

/**
 * Custom registration things
 */
function fa_form_user_register_form_alter(&$form, &$form_state, $form_id){

  // Hide the username field
  $form['account']['name']['#access'] = FALSE;

  // Invited users have need to use the email address where the invite was sent
  if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS])){
    if (isset($_SESSION[INVITE_SESSION_DESTINATION])){
      // Set the GET parameter back from the session variable
      $_GET['destination'] = $_SESSION[INVITE_SESSION_DESTINATION];
    }
    if ($_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID){
      // Disable editing of the email field
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['mail']['#default_value'] = $_SESSION[INVITE_SESSION_EMAIL];
    }
  }
  if (empty($_GET['destination'])){
    $_GET['destination'] = 'lykeion';
  }

  // Add : to email
  $form['account']['mail']['#title'] = t('Email address:');

  // Add : after First name and last name
  $form['field_first_name']['und'][0]['value']['#title'] = t('First Name:');
  $form['field_last_name']['und'][0]['value']['#title'] = t('Last Name:');

  // Edit the description for the newsletter signup
  if (isset($form['mailchimp_lists']) && isset($form['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletter'])){
    $form['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletter']['subscribe']['#title'] =
          t('Newsletter:');
    $form['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletter']['subscribe']['#description'] =
          t('Check this if you want to have the Filosofian Akatemia newsletter sent to your email address.');
  }

  // Add Facebook Connect button to the login form
  $facebook_output = _get_fboauth_div(t('Connect to Facebook:'));
  $form['facebook'] = array(
      '#markup' => $facebook_output,
      '#weight' => 0,
  );

  // Add my own validation handler where email can be set as the username
  array_unshift($form['#validate'], 'fa_user_register_validate');
}

function fa_user_register_validate($form, &$form_state){
  $form['account']['name']['#value'] = $form['account']['mail']['#value'];
  $form_state['values']['name'] = $form_state['values']['mail'];
}

function fa_menu_alter(&$items) {
  // Hide all tabs on the registration page
  $items['user/register']['type'] = MENU_CALLBACK;
  // Hide all tabs on the login and forgot password pages
  $items['user/login']['type'] = MENU_CALLBACK;
  $items['user/password']['type'] = MENU_CALLBACK;
  // Hide all normal user tabs on the profile page except edit
  // which is needed for forgot password
  $items['user/%/view']['type'] = MENU_CALLBACK;
  $items['user/%/mailchimp']['type'] = MENU_CALLBACK;
}

function fa_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'user_login'){
    if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS])
        && ($_SESSION[INVITE_SESSION_STATUS] == INVITE_USED
            || $_SESSION[INVITE_SESSION_STATUS] == INVITE_VALID)){

      // In order to prevent caching of the preset username, we have to
      // disable caching for user/login when routed from the invite module
      $GLOBALS['conf']['cache'] = FALSE;

      if (isset($_SESSION[INVITE_SESSION_DESTINATION])){
        // Set the GET parameter back from the session variable
        $_GET['destination'] = $_SESSION[INVITE_SESSION_DESTINATION];
      }

      // Set the default value
      $form['name']['#default_value'] = $_SESSION[INVITE_SESSION_EMAIL];
      // Disable editing of the username field
      $form['name']['#disabled'] = TRUE;
    }

    // Add Facebook Connect button to the login form
    $facebook_output = _get_fboauth_div();
    $form['facebook'] = array(
     '#markup' => $facebook_output,
        '#weight' => 101,
    );

    // Change user name hint to email
    $form['name']['#title'] = t('Email address:');

    // Add : after password as well
    $form['pass']['#title'] = t('Password:');

    // Add links and move them down
    $user_login_block = array();
    $user_login_block = user_login_block($user_login_block);
    $form['links'] = $user_login_block['links'];
    $form['links']['#weight'] = 102;

  }else if ($form_id == 'mailchimp_lists_user_subscribe_form_filosofian_akatemia_newsletterff'
            || $form_id == 'mailchimp_lists_user_subscribe_form_filosofian_akatemia_newsletter'){
    // Redirect to the front page
    $_GET['destination'] = '<front>';

  }else if ($form_id == 'user_pass'){
    $form['name']['#title'] = t('Email address:');
  }
}

/**
 * Alter login block
 */
function fa_block_view_user_login_alter(&$data, $block) {
  if (isset($data) && !empty($data) ){
    $facebook_output = _get_fboauth_div();
    $data['content']['facebook'] = array(
        '#markup' => $facebook_output,
        '#weight' => 101, // One over the "Log in" button
        );

    // Change user name hint to email
    $data['content']['name']['#title'] = t('Email address:');

    // Add : after password as well
    $data['content']['pass']['#title'] = t('Password:');

    // Move links down
    $data['content']['links']['#weight'] = 102;
  }
}

/**
 * Alter Mailchimp blocks
 */
function fa_block_view_mailchimp_lists_filosofian_akatemia_newsletterff_alter(&$data, $block) {
  if (!empty($data)){
    $data['subject'] = '<none>';

    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletterff']['title']['#markup'] =
        t('Order here the Filosofian Akatemia newsletter.');
    unset($data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletterff']['title']['#description']);

    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletterff']['mergevars']['EMAIL']['#title'] =
        t('Email:');
    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletterff']['mergevars']['FNAME']['#required'] = TRUE;
    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletterff']['mergevars']['FNAME']['#title'] =
        t('First Name:');
    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletterff']['mergevars']['LNAME']['#required'] = TRUE;
    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletterff']['mergevars']['LNAME']['#title'] =
        t('Last Name:');
    $data['content']['submit']['#value'] = t('Subscribe to newsletter');
  }
}

function fa_block_view_mailchimp_lists_filosofian_akatemia_newsletter_alter(&$data, $block) {
  if (!empty($data)){
    $data['subject'] = '<none>';
    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletter']['subscribe']['#title'] =
          t('Newsletter:');
    $data['content']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletter']['subscribe']['#description'] =
          t('Check this if you want to have the Filosofian Akatemia newsletter sent to your email address.');
    $data['content']['submit']['#value'] = t('Save');
  }
}


/**
 * Implements hook_block_info().
 */
function fa_block_info() {
  $blocks['fa-bg'] = array(
      'info' => t('Filosofian Akatemia Background Text'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['fa-up'] = array(
      'info' => t('Filosofian Akatemia Up One'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  $blocks['fa-invite'] = array(
      'info' => t('Filosofian Akatemia Invite Course'), //The name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*
* Prepares the contents of the block.
*/
function fa_block_view($delta = '') {
  module_load_include('inc', 'fa', 'fa.invite');
  $block = array();
  switch($delta){
    case 'fa-bg':
      if(!drupal_is_front_page() && user_access('access content')){
      	$config = menu_block_get_config($delta);
      	$tree = menu_tree_build($config);

      	if ($tree != NULL && isset($tree['content']) && isset($tree['content']['#content'])){
      		$grandparentofactive = _find_parent_of_active($tree['content']['#content'], TRUE);
            if (isset($grandparentofactive)){
        		$bgdivid = 'fa-bg-';
        		if (is_string($grandparentofactive)){
        			$menutext = strtolower($grandparentofactive);
        			$bgdivid .= $menutext. '-menu';
        		}else{
        			$menutext = strtolower($grandparentofactive['#title']);
        			$bgdivid .= $menutext;
        		}
        		$block['content'] =
        			'<div id="' . $bgdivid . '" class="fa-bg"><img src="' . base_path() . 'sites/all/themes/fa/images/menu-background-'
        			. $menutext
        			. '.png"/></div>';
            }
      	}
      }
      break;
    case 'fa-up':
      if(user_access('access content')){
        $config = menu_block_get_config($delta);
        $tree = menu_tree_build($config);

        if ($tree != NULL && isset($tree['content']) && isset($tree['content']['#content'])){
          $parentofactive = _find_parent_of_active($tree['content']['#content']);

          if (isset($parentofactive) && !is_string($parentofactive)){
            $options = array(
                'attributes' => array(
                    'class' => array('up-one'),
                    'id' => 'up-one',
                    'alt' => $parentofactive['#title']),
                'html' => TRUE,
            );
            $block['content'] = l(
                '<img src="' . base_path() . 'sites/all/themes/fa/images/menu-up.png" />',
                $parentofactive['#href'],
                $options);
          }
        }
      }
      break;
    case 'fa-invite':
      $course_form = drupal_get_form('fa_invite_form');
      $block['content'] = '<div id="fa-invite">'
                        . drupal_render($course_form) . '</div>';
      break;
  }
  return $block;
}

/**
 * Recursively finds closest parent of active node
 * from list of parents, returns the title of the active
 * parent as string if parent is itself active.
 */
function _find_parent_of_active($parentnodes, $get_grand_parent = FALSE) {
	$parentofactive = NULL;
	foreach($parentnodes as $parentnode){
		if (isset($parentnode['#attributes']) &&
				isset($parentnode['#attributes']['class'])){
			if (in_array('active-trail', $parentnode['#attributes']['class'])){
				if (in_array('active', $parentnode['#attributes']['class'])){
					// Parent is itself active, return title
					$parentofactive = $parentnode['#title'];
					break;
				}else{
					// Parent is in active trail, but not active
					if ($get_grand_parent){
					  $parentofactive = $parentnode;
					}else{
				      //see children
    			      $parentofactive = _find_parent_of_active($parentnode['#below']);
    				  if (is_string($parentofactive)){
    				    // Found a parent of an active node!
    				    $parentofactive = $parentnode;
    				    break;
    				  }
					}
				}
			}
		}
	}
	return $parentofactive;
}


/**
 * Replacement for theme_webform_element() to enable descriptions to come BEFORE the field to be filled out.
 */
function fa_webform_element($variables) {

  $element = $variables['element'];
  $value = $variables['element']['#children'];

  $wrapper_classes = array(
      'form-item',
  );
  $output = '<div class="' . implode(' ', $wrapper_classes) . '" id="' . $element['#id'] . '-wrapper">' . "\n";
  $required = !empty($element['#required']) ? '<span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';

  if (!empty($element['#title'])) {
    $title = $element['#title'];
    $output .= ' <label for="' . $element['#id'] . '">' . t('!title !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
  }
  if (!empty($element['#description'])) {
    $output .= ' <div class="description">' . $element['#description'] . "</div>\n";
  }
  $output .= '<div id="' . $element['#id'] . '">' . $value . '</div>' . "\n";
  $output .= "</div>\n";

  return $output;
}

/**
 * Custom user profile
 */
function fa_page_build(&$page){
  global $user;
  if (isset($page['content']) &&
      isset($page['content']['system_main']) &&
      isset($page['content']['system_main']['#entity_type']) &&
      $page['content']['system_main']['#entity_type'] == 'user' &&
      current_path() == 'user/' . $user->uid &&
      empty($_GET['pass-reset-token'])){
    // Hide the useless summary on users own page and show instead the editable form
    $page['content']['system_main']['summary']['#access'] = FALSE;
    $page['content']['system_main']['field_first_name']['#access'] = FALSE;
    $page['content']['system_main']['field_last_name']['#access'] = FALSE;
    $page['content']['system_main']['profile'] = drupal_get_form('user_profile_form', $user, 'account');
  }
  if (current_path() == 'user/register'){
    if (isset($_SESSION) && isset($_SESSION[INVITE_SESSION_STATUS])
        && ($_SESSION[INVITE_SESSION_STATUS] == INVITE_REUSABLE)){
      $user_login_form = drupal_get_form('user_login_block');
      $user_login_form['#id'] = 'user-login';
      fa_form_alter($user_login_form, $user_login_form, 'user_login');
      $page['content']['#sorted'] = FALSE;
      $page['content']['login'] = $user_login_form;
      $page['content']['login']['#weight'] = -10;
      unset($page['content']['login']['links']);
      // Add text "REGISTRATION" to the middle of the page
      $page['content']['system_main']['account']['#title'] = t('Registration');
      $page['content']['registration'] = array(
          '#markup' => '<p id="page-title">' . '&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;' . '<br/><br/><br/>' . t('New User') .'</p>',
          '#weight' => 0,
      );
    }
  }
}

function fa_form_user_profile_form_alter(&$form, &$form_state, $form_id){

  // Match only user profile page, not register page
  global $user;
  if (current_path() == 'user/' . $user->uid &&
      empty($_GET['pass-reset-token'])){
    $list = mailchimp_lists_load('filosofian_akatemia_newsletter');
    $form['account']['mailchimp_lists'] =  array(
        '#type' => 'fieldset',
        '#title' => t('Newsletters'),
        '#tree' => TRUE
    );
    mailchimp_lists_auth_newsletter_form($form['account']['mailchimp_lists'], $list, $form['#user']);

    $form['account']['mailchimp_lists']['mailchimp_filosofian_akatemia_newsletter']['subscribe']['#title'] =
        t('Newsletter:');

    $user_fields = user_load($user->uid);

    if (!empty($user_fields->field_first_name)){
      $form['field_first_name']['und']['0']['value']['#default_value']
        = $user_fields->field_first_name['und']['0']['value'];
    }

    if (!empty($user_fields->field_last_name)){
      $form['field_last_name']['und']['0']['value']['#default_value']
      = $user_fields->field_last_name['und']['0']['value'];
    }

    $form['account']['name']['#access'] = FALSE;
    $form['field_first_name']['und'][0]['value']['#title'] = t('First Name:');
    $form['field_last_name']['und'][0]['value']['#title'] = t('Last Name:');
    $form['account']['mail']['#title'] = t('Email address:');
    $form['account']['current_pass']['#title'] = t('Current password:');
    $form['account']['current_pass']['#weight'] = 100;
    $form['account']['current_pass']['#description'] = t('Give your current password if you want to change the fields <em class="placeholder">Email address</em> or <em class="placeholder">Password</em>.');
    $form['account']['pass']['#title'] = t('Change password:');
    unset($form['account']['pass']['#description']);
    $form['account']['pass']['#weight'] = 50;
    $form['account']['status']['#access'] = FALSE;
    $form['account']['roles']['#access'] = FALSE;
    $form['inviter']['#access'] = FALSE;
    $form['locale']['#access'] = FALSE;
    $form['timezone']['#access'] = FALSE;
    $form['overlay_control']['#access'] = FALSE;
    $form['picture']['#access'] = FALSE;
    $form['actions']['cancel']['#access'] = FALSE;

    // Add custom validation handler first where email can be set as the username
    array_unshift($form['#validate'], 'fa_form_user_profile_form_validate');
    // Add custom mailchimp subscription submitter to get mailing list to work right
    array_push($form['#submit'], 'fa_form_user_profile_form_submit');
  }

  if (preg_match('/^user\/'. $user->uid . '/', current_path()) && !empty($_GET['pass-reset-token'])){
    // Forgot password page, hide everything except password change
    $form['account']['name']['#access'] = FALSE;
    $form['account']['fboauth']['#access'] = FALSE;
    $form['field_first_name']['#access'] = FALSE;
    $form['account']['mail']['#access'] = FALSE;
    $form['field_last_name']['#access'] = FALSE;
    $form['fboauth']['#access'] = FALSE;
    $form['locale']['#access'] = FALSE;
    $form['timezone']['#access'] = FALSE;
    $form['overlay_control']['#access'] = FALSE;
    $form['picture']['#access'] = FALSE;
    $form['actions']['cancel']['#access'] = FALSE;
    $_GET['destination'] = 'user';
  }
}

function fa_form_user_profile_form_validate(&$form, &$form_state){
  $form['account']['name']['#value'] = $form['account']['mail']['#value'];
  $form_state['values']['name'] = $form_state['values']['mail'];
}

function fa_form_user_profile_form_submit(&$form, &$form_state){
  $_GET['destination'] = 'user';
  /* This is called twice so we don't call it again if already subscribed:
   * http://drupal.org/node/988072 */
  foreach ($form_state['values']['mailchimp_lists'] as $form_list) {
    $list = $form_list['list'];
    $selected = $form_list['subscribe'];
    if (mailchimp_is_subscribed($list->mc_list_id, $form['#user']->mail) && $selected){
      return;
    }
  }
  $form_state['values']['account'] = $form['#user'];
  mailchimp_lists_user_subscribe_form_submit($form, $form_state);
}

function _get_fboauth_div($description = NULL){
  $description_section = '';
  if ($description != NULL)
    $description_section = '<div id="fb-auth-login-description">' . $description . '</div>';
  return '<div id="fboauth-login">' . $description_section . fboauth_action_display('connect') . '</div>';
}

/**
 * Implements hook_mail_alter() to set
 * Return-Path address to the same address as the sender.
 */
function invite_mail_alter(&$message) {
  $message['headers']['Return-Path'] = 'bounce@filosofianakatemia.fi';
}
